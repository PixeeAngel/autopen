SocketCAN userspace utilities and tools

This repository contains some userspace utilities for Linux CAN subsystem (aka SocketCAN):

Basic tools to display, record, generate and replay CAN traffic

candump : display, filter and log CAN data to files
canplayer : replay CAN logfiles
cansend : send a single frame
cangen : generate (random) CAN traffic
cansniffer : display CAN data content differences (just 11bit CAN IDs)
CAN access via IP sockets

canlogserver : log CAN frames from a remote/local host
bcmserver : interactive BCM configuration (remote/local)
socketcand : use RAW/BCM/ISO-TP sockets via TCP/IP sockets
CAN in-kernel gateway configuration

cangw : CAN gateway userpace tool for netlink configuration
CAN bus measurement and testing

canbusload : calculate and display the CAN busload
can-calc-bit-timing : userspace version of in-kernel bitrate calculation
canfdtest : Full-duplex test program (DUT and host part)
ISO-TP tools ISO15765-2:2016 for Linux

isotpsend : send a single ISO-TP PDU
isotprecv : receive ISO-TP PDU(s)
isotpsniffer : 'wiretap' ISO-TP PDU(s)
isotpdump : 'wiretap' and interpret CAN messages (CAN_RAW)
isotpserver : IP server for simple TCP/IP <-> ISO 15765-2 bridging (ASCII HEX)
isotpperf : ISO15765-2 protocol performance visualisation
isotptun : create a bi-directional IP tunnel on CAN via ISO-TP
Log file converters

asc2log : convert ASC logfile to compact CAN frame logfile
log2asc : convert compact CAN frame logfile to ASC logfile
log2long : convert compact CAN frame representation into user readable
Serial Line Discipline configuration (for slcan driver)

slcan_attach : userspace tool for serial line CAN interface configuration
slcand : daemon for serial line CAN interface configuration
slcanpty : creates a pty for applications using the slcan ASCII protocol


While not specific to CANtact, can-utils provides a simple set of tools for working with CAN from the Linux command line. In this article, we'll go over the usage of several tools. Note that can-utils requires SocketCAN, and only works on Linux.

Installing can-utils
Installation will vary between Linux distributions.

Ubuntu and Debian

sudo apt-get install can-utils

Load Kernel Modules
You will need to ensure your kernel has the CAN modules enabled. This is done with modprobe:

sudo modprobe can

To use virtual CAN devices:

sudo modprobe vcan

Configuring the Network Interface
Usage of can-utils requires a SocketCAN device. For information on using CANtact with SocketCAN, see the Quick Start Guide. For other devices, refer to the manufacturer's documentation.

Once the device has been created, it must be enabled using ifconfig. For a device called can0, use the command:

sudo ifconfig can0 up

The Utilities
Now that everything is set up, we can start communicating using the utilities in the can-utils package.

candump

To listen to traffic on the bus, we can use candump.

To show all traffic in real time on device can0:

candump can0

The displayed messages can be filtered using a mask and identifier. Two filter types are available:

[can_id]:[can_mask] matches when [received_can_id] & [can_mask] == [can_id] & [mask]
[can_id]~[can_mask] matches when [received_can_id] & [can_mask] != [can_id] & [mask]

Multiple filters can be combined by separating with commas.

Examples

Only show messages with ID 0x123:
candump vcan0,0x123:0x7FF

Only show messages with ID 0x123 or ID 0x456:
candump vcan0,0x123:0x7FF,0x456:0x7FF

cansend

The cansend utility sends a single CAN frame. You will have to specify a device, an identifier and data bytes to send. For example:

cansend can0 123#1122334455667788

will send a message on interface can0 with identifier 0x123 and data bytes [0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88]. Note that this tool always assumes values are given in hexidecimal.

Virtual CAN Devices
Virtual CAN devices, or vcan devices, can be used to send CAN frames around in memory. This is useful for simulation, testing, and bridging. It also lets you try out can-utils without having a hardware CAN device.

To create a vcan device use:

sudo ip link add name vcan0 type vcan

NOTE: If you get the error RTNETLINK answers: Operation not supported, load the module with sudo modprobe vcan and try again.

Once the device is created, you can use it like any other CAN device. Just replace can0 in the above examples with vcan0. For example:

sudo ifconfig vcan0 up
cansend vcan0 123#1122334455667788
candump vcan0
