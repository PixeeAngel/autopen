[size=32][b]Caring Caribou[/b][/size]

Features and Architecture

CaringCaribou is module based with a master command (cc.py) that runs the show. The reason for this is to enable an easy drop-in architecture for new modules.

List of Modules

dcm.py - Diagnostics ISO 14229

discovery - ArbID Discovery. Tries to connect (02 10 01) to all possible ArbId (0x000-0x7FF) and collect valid responses (xx 7F or xx 50)
services - Service Discovery. Brute force all Service Id's (SID) and report any responses (anything that is not xx F7 11)
subfunc - Sub-function Discovery. Brute force engine that takes SID and an index indicating which positions to brute force as input.
dtc - Diagnostic Trouble Codes. Fetches DTCs. Can clear DTCs and MIL (Engine Light) as well.
Detailed information on the dcm-module.

xcp.py - Universal Measurement and Calibration Protocol (XCP)

discovery - ArbId Discovery. Tries to connect (FF) to all possible ArbId (0x000-0x7FF) and collect all valid responses (FF or FE)
info - XCP Get Basic Information. Connects and gets information about XCP abilities in the target environment
dump - XCP Upload. Used to dump ECU memory (SRAM, flash and bootloader) to file
Detailed information on the xcp-module.

listener.py - Listener

ArbId listener - register all ArbIds heard on the CAN bus
Detailed information on the listener-module.

send.py - Send CAN packets

Raw message transmission module, used to drive manual test cases
Detailed information on the send-module.

dump.py - Dump CAN traffic

Dump incoming traffic to stdout or file.
Detailed information on the dump-module.

can_actions.py

This is the daddy of all shared module functionality. Imported by all modules. Provides abstraction for access to the CAN bus, CAN bruteforce engines etc.